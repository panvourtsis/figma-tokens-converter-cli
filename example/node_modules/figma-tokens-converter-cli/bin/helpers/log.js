"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = __importDefault(require("chalk"));
var NAME = 'figma-tokens-converter-cli';
var log = console.log;
var logs = {
    error: function () {
        var props = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            props[_i] = arguments[_i];
        }
        return log(chalk_1.default.red.apply(chalk_1.default, __spreadArray([NAME, '[ERROR]'], props, false)));
    },
    info: function () {
        var props = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            props[_i] = arguments[_i];
        }
        return log(chalk_1.default.blue.apply(chalk_1.default, __spreadArray([NAME, '[INFO]'], props, false)));
    },
    success: function () {
        var props = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            props[_i] = arguments[_i];
        }
        return log(chalk_1.default.green.apply(chalk_1.default, __spreadArray([NAME, '[SUCCESS]'], props, false)));
    },
    warning: function () {
        var props = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            props[_i] = arguments[_i];
        }
        return log(chalk_1.default.bgYellow.apply(chalk_1.default, __spreadArray([NAME, '[WARNING]'], props, false)));
    },
};
exports.default = logs;
