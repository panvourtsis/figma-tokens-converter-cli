"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var camelCase_1 = __importDefault(require("lodash/camelCase"));
var log_1 = __importDefault(require("./helpers/log"));
var utils_1 = require("./utils");
var run = function (input, output, options) {
    log_1.default.info('start reading path ', input);
    fs_1.default.readdir(input, function (err, files) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            log_1.default.info("files found on path ".concat(input), files.join(', '));
            files.forEach(function (fileName) {
                var stat = fs_1.default.lstatSync("".concat(input + fileName)).isDirectory();
                if (stat) {
                    // run recurring read
                    return run(input + fileName + '/', output, options);
                }
                fs_1.default.readFile(input + fileName, 'utf-8', function (err, content) {
                    if (err) {
                        log_1.default.error(err);
                        return;
                    }
                    var fileNameNoExtension = fileName.replace('.json', '');
                    // @TODO pass this as prop on arguments in the future
                    var tranformFileNameFun = camelCase_1.default;
                    var newFileName = tranformFileNameFun(fileNameNoExtension);
                    var convertedData = (0, utils_1.recursiveDotNotationToSquareBackets)(JSON.parse(content), tranformFileNameFun);
                    var data = JSON.stringify(convertedData, null, 4).replace(/"{|\}"/gi, '');
                    var importsArray = (0, utils_1.returnImports)(JSON.parse(content)).map(function (dat) { return "import ".concat(tranformFileNameFun(dat), " from './").concat(tranformFileNameFun(dat), "'; \n"); });
                    log_1.default.info('start transforming', fileName);
                    var isTypescript = options.outputExtension === 'ts';
                    (0, utils_1.writeFile)("".concat(output).concat(input.replace(input, '')).concat(newFileName, ".").concat(options.outputExtension), "".concat(importsArray.toString().replace(',', '')).concat(importsArray.length > 0 ? "\n" : "", "const ").concat(newFileName, " = ").concat(data).concat(isTypescript ? ' as const' : '', "; \n\nexport default ").concat(newFileName, ";"), function () {
                        log_1.default.success('done transforming', "".concat(newFileName, ".").concat(options.outputExtension));
                    });
                });
            });
            return [2 /*return*/];
        });
    }); });
};
exports.default = run;
